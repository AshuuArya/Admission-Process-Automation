# Authentication and Document Upload Implementation

## Authentication Flow

The authentication system in the ABES College Admission Portal uses JWT (JSON Web Tokens) for secure authentication. Here's how it works:

1. **Registration**:
   - User submits registration form with name, email, password, and mobile number
   - Server validates input data
   - Password is hashed using bcrypt (10 rounds) for secure storage
   - A verification token is generated using crypto.randomBytes(20)
   - User record is created in the database with verification status set to false
   - A verification email is sent to the user's email address
   - JWT token is generated and returned to the client for immediate login

2. **Email Verification**:
   - User clicks on the verification link in the email
   - Server verifies the token against the database
   - If valid, user's isVerified flag is set to true and token is cleared
   - User can now access verified-only features

3. **Login Process**:
   - User submits email and password
   - Server validates credentials
   - Password is verified against hashed password using bcrypt.compare()
   - If valid, JWT token is generated and returned
   - Token contains the user ID and expires after 30 days
   - Client stores token in localStorage and sets Authorization header

4. **Authentication Middleware**:
   - All protected routes use the auth middleware
   - Middleware extracts token from Authorization header
   - Token is verified using JWT_SECRET
   - User information is attached to the request object
   - If token is invalid or expired, 401 error is returned

5. **Password Reset**:
   - User requests password reset with email
   - Server generates a reset token valid for 30 minutes
   - Token is hashed and stored in the user record
   - Reset link is sent to user's email
   - User submits new password with token
   - Server verifies token and updates password

## Document Upload Implementation

The document upload system allows students to securely upload and manage their application documents:

1. **Upload Configuration**:
   - Using multer for file handling and validation
   - Files stored in the 'uploads/' directory
   - Filename format: `{documentType}-{timestamp}{extension}`
   - Maximum file size: 5MB
   - Supported file types: JPEG, JPG, PNG, PDF, DOC, DOCX

2. **Security Measures**:
   - File type validation using both extension and MIME type checking
   - File size restriction to prevent DOS attacks
   - Only authenticated users can upload documents
   - Documents are associated with specific user and application
   - Authorization checks ensure users can only access their own documents

3. **Document Verification Flow**:
   - Student uploads required documents
   - Admin reviews documents in the dashboard
   - Documents can be marked as verified or rejected with remarks
   - If all documents are verified, application status can progress
   - Students can see verification status for each document

4. **Implementation Details**:
   - Document metadata stored in MongoDB (path, type, size, etc.)
   - Physical files stored in file system
   - Document verification status tracked
   - Proper error handling for upload failures
   - Automatic cleanup of orphaned files

5. **Security Considerations**:
   - No direct public access to uploaded files
   - Files served through authenticated API endpoints
   - File type validation to prevent malicious uploads
   - Proper file permissions on server
   - Document deletion removes both database record and physical file

## API Endpoints for Documents

- `POST /api/documents/upload` - Upload a new document
- `GET /api/documents/:id` - Get document details
- `DELETE /api/documents/:id` - Delete a document
- `GET /api/documents/my-documents` - Get all documents for the authenticated user
- `PUT /api/admin/documents/:id/verify` - Verify or reject a document (admin only)

The document system is designed to be secure, efficient, and user-friendly, with proper validation and error handling at each step of the process.